@page "/seat-layouts"
@using EventApp.Shared.DTOs.Seat
@inject ISeatLayoutClient SeatLayoutService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h4" Class="mb-4">Seat Layouts</MudText>

    <MudPaper Class="pa-4 mb-4"
              Style="background: #212121">
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Success"
                   OnClick="@AddLayout">
            <MudIcon Icon="@Icons.Material.Filled.Add" 
                     Size="Size.Small"
                     Style="margin: 2px"/>
            Seat Layout
        </MudButton>
    </MudPaper>

    <MudTable Items="@layouts"
              Hover="true"
              Dense="true"
              >
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Rows</MudTh>
            <MudTh>Columns</MudTh>
            <MudTh>Seats</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Rows">@context.Rows</MudTd>
            <MudTd DataLabel="Columns">@context.Columns</MudTd>
            <MudTd DataLabel="Seats">@context.SeatCount</MudTd>
            <MudTd>
                
                <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                               Color="Color.Error"
                               OnClick="@(() => DeleteLayout(context))"
                               Size="Size.Medium"
                               style="border: solid; border-width:thin; border-color: red; padding: 3px" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<SeatLayoutDto> layouts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLayouts();
    }

    private async Task LoadLayouts()
    {
        layouts = (await SeatLayoutService.GetAllAsync()).ToList();
    }

    private async Task AddLayout()
    {
        var parameters = new DialogParameters { ["Model"] = new CreateSeatLayoutDto() };
        var dialog = DialogService.Show<CreateLayoutFormDialog>("Add Seat Layout", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CreateSeatLayoutDto dto)
        {
            var id = await SeatLayoutService.CreateAsync(dto);
            if (id != null)
            {
                Snackbar.Add("Seat Layout added successfully.", Severity.Success);
                await LoadLayouts();
            }
            else
            {
                Snackbar.Add("Failed to add seat layout.", Severity.Error);
            }
        }
    }

    private async Task DeleteLayout(SeatLayoutDto layout)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{layout.Name}'?",
            yesText: "Delete", cancelText: "Cancel");

        if (confirmed == true)
        {
            var success = await SeatLayoutService.DeleteAsync(layout.Id);
            if (success)
            {
                Snackbar.Add("Seat Layout deleted.", Severity.Info);
                await LoadLayouts();
            }
            else
            {
                Snackbar.Add("This Seat Layout Is Used In Existing Event and Cannot be Deleted.", Severity.Error);
            }
        }
    }
}
