@page "/events/{EventId:guid}/manage"
@inject IEventService EventService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">

    
    <MudPaper Class="" Style="background-color: #37474f; box-shadow: 0 8px 32px rgba(0,0,0,0.3);">
        <MudPaper Class="d-flex justify-content-center align-content-center"
                  Style="background-color: #B71C1C; padding-bottom: 10px; padding-top: 10px">
            <MudText Typo="Typo.h4" Class="mb-4" Style="color: #ffffff; font-weight: 500;">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Style="color: green;" />
                Manage Event
            </MudText>
        </MudPaper>
        <MudDivider Class="mb-4" Style="border-color: #546e7a;" />

        @if (eventDto == null)
        {
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="pa-8">
                <MudProgressCircular Indeterminate="true" Color="Color.Error" Size="Size.Large" />
                <MudText Style="color: #b0bec5;">Loading event details...</MudText>
            </MudStack>
        }
        else
        {
            <MudPaper style="background-color: inherit; padding:10px">
                <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <MudGrid Spacing="3">
                        <!-- Title Field -->
                        <MudItem xs="12">
                            <MudTextField Label="Event Title"
                                          @bind-Value="updateModel.Title"
                                          Required="true"
                                          FullWidth="true"
                                          Variant="Variant.Text"
                                          Style="background-color: #455a64; color:#ffffff;border-radius: 8px; padding:12px; label"
                                          Class="mb-3" />
                        </MudItem>

                        <!-- Date Fields -->
                        <MudItem xs="12" md="6">
                            <MudDatePicker DateFormat="MM/dd/yyyy HH:mm"
                                           PickerVariant="PickerVariant.Dialog"
                                           Label="Start Date & Time"
                                           Required="true"
                                           Editable="true"
                                           Placeholder="Select start date"
                                           Date="@updateModel.StartDateTime"
                                           DateChanged="@(date => OnDateOrTimeChanged(true, date))"
                                           Variant="Variant.Text"
                                           Style="background-color: #455a64; color:#ffffff;border-radius: 8px; padding:12px; label"
                                           Class="mb-3" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudDatePicker Label="End Date & Time"
                                           Date="@updateModel.EndDateTime"
                                           DateChanged="@(date => OnDateOrTimeChanged(false, date))"
                                           DateFormat="MM/dd/yyyy HH:mm"
                                           PickerVariant="PickerVariant.Dialog"
                                           Required="true"
                                           Editable="true"
                                           Placeholder="Select end date"
                                           Variant="Variant.Text"
                                           Style="background-color: #455a64; color: #ffffff;border-radius: 8px; padding:12px; label"
                                           Class="mb-3" />
                        </MudItem>

                        <!-- Price Field -->
                        <MudItem xs="12" md="6">
                            <MudNumericField T="decimal"
                                             Label="Price ($)"
                                             @bind-Value="updateModel.Price"
                                             Required="true"
                                             Variant="Variant.Text"
                                             Style="background-color: #455a64; color:#ffffff;border-radius: 8px; padding:12px; label"
                                             Class="mb-3" />
                        </MudItem>

                        <!-- Status Field -->
                        <MudItem xs="12" md="6">
                            @if (isAdmin)
                            {
                                <MudSelect T="EventStatus"
                                           Label="Event Status"
                                           @bind-Value="updateModel.Status"
                                           Variant="Variant.Text"
                                           Style="background-color: #455a64; color:#ffffff;border-radius: 8px; padding:12px; label"
                                           Class="mb-3">
                                    @foreach (var status in Enum.GetValues<EventStatus>())
                                    {
                                        <MudSelectItem Value="@status">@status</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudTextField Label="Event Status"
                                              Value="@updateModel.Status.ToString()"
                                              Disabled="true"
                                              FullWidth="true"
                                              Variant="Variant.Outlined"
                                              Style="background-color: #37474f; border-radius: 8px; padding:12px; label; opacity: 0.7;"
                                              InputStyle="color: #90a4ae; padding: 12px;"
                                              LabelStyle="color: #78909c;"
                                              Class="mb-3" />
                            }
                        </MudItem>

                        <!-- Description Field -->
                        <MudItem xs="12">
                            <MudTextField Label="Event Description"
                                          @bind-Value="updateModel.Description"
                                          Required="true"
                                          FullWidth="true"
                                          Lines="4"
                                          Variant="Variant.Text"
                                          Style="background-color: #455a64; color:#ffffff;border-radius: 8px; padding:12px; label"
                                          Class="mb-4" />
                        </MudItem>

                        <!-- Alert Messages -->
                        <MudItem xs="12">
                            @if (!string.IsNullOrEmpty(availabilityMessage))
                            {
                                <MudAlert Severity="@availabilitySeverity"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(183, 28, 28, 0.1); border-left: 4px solid #B71C1C;">
                                    @availabilityMessage
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <MudAlert Severity="Severity.Success"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(76, 175, 80, 0.1); border-left: 4px solid #4caf50;">
                                    @successMessage
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <MudAlert Severity="Severity.Error"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(244, 67, 54, 0.1); border-left: 4px solid #f44336;">
                                    @errorMessage
                                </MudAlert>
                            }
                        </MudItem>

                        <!-- Action Buttons -->
                        <MudItem xs="12">
                            <MudStack Row="true"
                                      Spacing="2"
                                      AlignItems="AlignItems.Center"
                                      Justify="Justify.Center"
                                      Class="mt-4">
                                <MudButton Color="Color.Success"
                                           Variant="Variant.Filled"
                                           OnClick="HandleValidSubmit"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           Class="px-6 py-2"
                                           Style="background-color: #4caf50; color: white; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Save
                                </MudButton>

                                <MudButton Color="Color.Error"
                                           Variant="Variant.Outlined"
                                           OnClick="DeleteEvent"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Class="px-6 py-2"
                                           Style="border-color: #B71C1C; color: #B71C1C; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Delete
                                </MudButton>

                                <MudButton Color="Color.Default"
                                           Variant="Variant.Text"
                                           OnClick="Cancel"
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           Class="px-6 py-2"
                                           Style="color: #b0bec5; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Cancel
                                </MudButton>
                            </MudStack>
                        </MudItem>
                    </MudGrid>

                    <ValidationSummary style="color: #ff7043; margin-top: 16px; padding: 12px; background-color: rgba(255, 112, 67, 0.1); border-radius: 8px;" />
                </EditForm>
            </MudPaper>
            
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public Guid EventId { get; set; }

    private EventDto? eventDto;
    private UpdateEventDto updateModel = new();

    private string? successMessage;
    private string? errorMessage;
    private string? availabilityMessage;
    private Severity availabilitySeverity = Severity.Info;
    private bool canSubmit = true;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var allEvents = await EventService.GetAllEventsAsync();
        eventDto = allEvents.FirstOrDefault(e => e.Id == EventId);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");

        if (eventDto != null)
        {
            updateModel = new UpdateEventDto
            {
                Title = eventDto.Title,
                Description = eventDto.Description,
                StartDateTime = eventDto.StartDateTime,
                EndDateTime = eventDto.EndDateTime,
                Price = eventDto.Price,
                Status = eventDto.Status
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!canSubmit)
        {
            errorMessage = "Please fix validation errors before saving.";
            return;
        }

        var success = await EventService.UpdateEventAsync(EventId, updateModel);
        if (success)
        {
            successMessage = "Event updated successfully!";
            Nav.NavigateTo("/my-events", forceLoad: true);
        }
        else
        {
            errorMessage = "Failed to update event.";
        }
    }

    private async Task OnDateOrTimeChanged(bool isStart, DateTime? newValue)
    {
        if (newValue is null) return;

        if (isStart)
            updateModel.StartDateTime = newValue.Value;
        else
            updateModel.EndDateTime = newValue.Value;

        availabilityMessage = null;
        canSubmit = false;

        if (updateModel.EndDateTime <= updateModel.StartDateTime)
        {
            availabilityMessage = "End must be after start.";
            availabilitySeverity = Severity.Error;
            return;
        }

        var res = await EventService.CheckAsync(updateModel.StartDateTime, updateModel.EndDateTime);

        if (res == null)
        {
            availabilityMessage = "Could not verify availability.";
            availabilitySeverity = Severity.Error;
            return;
        }

        if (res.Available)
        {
            availabilityMessage = "Time slot is available.";
            availabilitySeverity = Severity.Success;
            canSubmit = true;
        }
        else
        {
            availabilityMessage = "This time slot is already booked.";
            availabilitySeverity = Severity.Error;
        }
    }

    private async Task DeleteEvent()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this event? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel",
            options: new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall }
        );

        if (result == true)
        {
            var success = await EventService.DeleteEventAsync(EventId);
            if (success)
            {
                Nav.NavigateTo("/my-events", forceLoad: true);
            }
            else
            {
                errorMessage = "Failed to delete event.";
            }
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/my-events", forceLoad: true);
    }
}