
@page "/events/{EventId:guid}/manage"
@inject IEventService EventService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@attribute [Authorize]

<LoadingComponent />
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4 p-3">
    <MudPaper Style="background-color: #0B192C; box-shadow: 0 8px 32px rgba(0,0,0,0.3);">

        <!-- Event Header -->
        <div style="background: linear-gradient(135deg, #4C3A51 0%, #B25068 100%); padding: 20px; position: relative;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mb-1">
                <MudText Typo="Typo.h4" Style="color: #ffffff; font-weight: 500;">
                    Manage Event
                </MudText>
            </MudStack>
            <MudText Typo="Typo.body1" Class="mb-1" Style="color: #b0bec5;">
                Update your event details below
            </MudText>
        </div>

        <MudDivider Class="mb-4" Style="border-color: #546e7a;" />

        @if (eventDto == null)
        {
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="pa-8">
                <MudProgressCircular Indeterminate="true" Color="Color.Error" Size="Size.Large" />
                <MudText Style="color: #b0bec5;">Loading event details...</MudText>
            </MudStack>
        }
        else
        {
            <MudPaper Style="background-color: inherit; margin: 5px; padding: 10px;">
                <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <MudGrid Spacing="3">
                        <!-- Title Field -->
                        <MudItem xs="12">
                            <MudPaper Class="d-flex flex-column" Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">Event Title</MudText>
                                <MudTextField @bind-Value="updateModel.Title"
                                              Required="true"
                                              Variant="Variant.Text"
                                              Placeholder="Enter event title"
                                              FullWidth="true"
                                              Style="background-color:black; color:#d3d3d3; border:1px solid #2196f3; border-radius:6px; padding:8px;" />
                            </MudPaper>
                        </MudItem>

                        <!-- Ticket Price -->
                        <MudItem xs="12" md="6">
                            <MudPaper Class="d-flex flex-column" Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">Ticket Price</MudText>
                                <MudNumericField T="decimal"
                                                 @bind-Value="updateModel.Price"
                                                 Required="true"
                                                 Min="1"
                                                 Step="0.01M"
                                                 Variant="Variant.Text"
                                                 Placeholder="Enter price"
                                                 Style="background-color:black; color:#d3d3d3; border:1px solid #2196f3; border-radius:6px; padding:8px;" />
                            </MudPaper>
                        </MudItem>

                        <!-- Start Date -->
                        <MudItem xs="12" md="6">
                            <MudPaper Class="d-flex flex-column" Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">Start Date & Time</MudText>
                                <MudDatePicker Date="@updateModel.StartDateTime"
                                               DateChanged="@(date => OnDateOrTimeChanged(true, date))"
                                               DateFormat="MM/dd/yyyy HH:mm"
                                               PickerVariant="PickerVariant.Inline"
                                               Required="true"
                                               Editable="true"
                                               Variant="Variant.Text"
                                               Style="background-color:black; color:#d3d3d3; border:1px solid #2196f3; border-radius:6px; padding:8px;" />
                            </MudPaper>
                        </MudItem>

                        <!-- End Date -->
                        <MudItem xs="12" md="6">
                            <MudPaper Class="d-flex flex-column" Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">End Date & Time</MudText>
                                <MudDatePicker Date="@updateModel.EndDateTime"
                                               DateChanged="@(date => OnDateOrTimeChanged(false, date))"
                                               DateFormat="MM/dd/yyyy HH:mm"
                                               PickerVariant="PickerVariant.Inline"
                                               Required="true"
                                               Editable="true"
                                               Variant="Variant.Text"
                                               Style="background-color:black; color:#d3d3d3; border:1px solid #2196f3; border-radius:6px; padding:8px;" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudPaper Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">
                                    Event Status
                                </MudText>

                                @if (isAdmin)
                                {
                                    <MudSelect T="EventStatus"
                                               @bind-Value="updateModel.Status"
                                               Variant="Variant.Text"
                                               Style="background-color: black; color: #ffffff; border-radius: 8px; padding:8px;"
                                               Class="mb-3">
                                        @foreach (var status in Enum.GetValues<EventStatus>())
                                        {
                                            <MudSelectItem Value="@status">@status</MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                                else
                                {
                                    <MudTextField Value="@updateModel.Status.ToString()"
                                                  Disabled="true"
                                                  FullWidth="true"
                                                  Variant="Variant.Text"
                                                  Style="background-color: black; color: #d3d3d3; border-radius: 8px; padding:8px; opacity:0.7;"
                                                  Class="mb-3" />
                                }
                            </MudPaper>
                        </MudItem>

                        <!-- Event Description -->
                        <MudItem xs="12">
                            <MudPaper Class="d-flex flex-column" Style="padding:12px; background-color:inherit; border-radius:8px;">
                                <MudText Class="mb-1" Style="color:white; font-weight:500;">Event Description</MudText>
                                <MudTextField @bind-Value="updateModel.Description"
                                              Required="true"
                                              FullWidth="true"
                                              Lines="4"
                                              Variant="Variant.Text"
                                              Placeholder="Enter event description"
                                              Style="background-color:black; color:#d3d3d3; border:1px solid #2196f3; border-radius:6px; padding:8px;" />
                            </MudPaper>
                        </MudItem>

                        <!-- Alerts -->
                        <MudItem xs="12">
                            @if (!string.IsNullOrEmpty(availabilityMessage))
                            {
                                <MudAlert Severity="@availabilitySeverity"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(255, 193, 7, 0.1); border-left: 4px solid #ffc107;">
                                    @availabilityMessage
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <MudAlert Severity="Severity.Success"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(76, 175, 80, 0.1); border-left: 4px solid #4caf50;">
                                    @successMessage
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <MudAlert Severity="Severity.Error"
                                          Class="mb-3"
                                          Style="border-radius: 8px; background-color: rgba(244, 67, 54, 0.1); border-left: 4px solid #f44336;">
                                    @errorMessage
                                </MudAlert>
                            }
                        </MudItem>

                        <!-- Action Buttons -->
                        <MudItem xs="12">
                            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mt-4">
                                <MudButton Color="Color.Success"
                                           Variant="Variant.Filled"
                                           OnClick="HandleValidSubmit"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           Class="px-6 py-2"
                                           Style="background-color: #4caf50; color: white; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Save
                                </MudButton>
                                <MudButton Color="Color.Error"
                                           Variant="Variant.Outlined"
                                           OnClick="DeleteEvent"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Class="px-6 py-2"
                                           Style="border-color: #B71C1C; color: #B71C1C; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Delete
                                </MudButton>
                                <MudButton Color="Color.Default"
                                           Variant="Variant.Text"
                                           OnClick="Cancel"
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           Class="px-6 py-2"
                                           Style="color: #b0bec5; border-radius: 8px; text-transform: none; font-weight: 500;">
                                    Cancel
                                </MudButton>
                            </MudStack>
                        </MudItem>
                    </MudGrid>

                    <ValidationSummary style="color: #ff7043; margin-top: 16px; padding: 12px; background-color: rgba(255, 112, 67, 0.1); border-radius: 8px;" />
                </EditForm>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>


@code {
    [Parameter] public Guid EventId { get; set; }

    private EventDto? eventDto;
    private UpdateEventDto updateModel = new();

    private string? successMessage;
    private string? errorMessage;
    private string? availabilityMessage;
    private Severity availabilitySeverity = Severity.Info;
    private bool canSubmit = true;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var allEvents = await EventService.GetAllEventsAsync();
        eventDto = allEvents.FirstOrDefault(e => e.Id == EventId);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");

        if (eventDto != null)
        {
            updateModel = new UpdateEventDto
            {
                Title = eventDto.Title,
                Description = eventDto.Description,
                StartDateTime = eventDto.StartDateTime,
                EndDateTime = eventDto.EndDateTime,
                Price = eventDto.Price,
                Status = eventDto.Status
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!canSubmit)
        {
            errorMessage = "Please fix validation errors before saving.";
            return;
        }

        var success = await EventService.UpdateEventAsync(EventId, updateModel);
        if (success)
        {
            successMessage = "Event updated successfully!";
            Nav.NavigateTo("/my-events", forceLoad: true);
        }
        else
        {
            errorMessage = "Failed to update event. The Schedule Might have conflict to an existing Event";
        }
    }

    private async Task OnDateOrTimeChanged(bool isStart, DateTime? newValue)
    {
        if (newValue is null) return;

        if (isStart)
            updateModel.StartDateTime = newValue.Value;
        else
            updateModel.EndDateTime = newValue.Value;

        availabilityMessage = null;
        canSubmit = false;

        if (updateModel.EndDateTime <= updateModel.StartDateTime)
        {
            availabilityMessage = "End must be after start.";
            availabilitySeverity = Severity.Error;
            return;
        }

        var res = await EventService.CheckAsync(updateModel.StartDateTime, updateModel.EndDateTime, updateModel.LocationId);

        if (res == null)
        {
            availabilityMessage = "Could not verify availability.";
            availabilitySeverity = Severity.Error;
            return;
        }

        if (res.Available)
        {
            availabilityMessage = "✅ Time slot is available.";
            availabilitySeverity = Severity.Success;
            canSubmit = true;
        }
        else
        {
            availabilityMessage = "❌ This time slot is already booked.";
            availabilitySeverity = Severity.Error;
        }

    }

    private async Task DeleteEvent()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this event? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel",
            options: new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall }
        );

        if (result == true)
        {
            try
            {
                LoadingService.Show("Deleting Event...");
                var success = await EventService.DeleteEventAsync(EventId);

                if (success)
                {
                    Snackbar.Add("Event deleted successfully!", Severity.Success);
                    Nav.NavigateTo("/my-events", forceLoad: true);
                }
                else
                {
                    Snackbar.Add("Failed to delete event.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
            }
            finally
            {
                LoadingService.Hide();
            }
        }
    }


    private void Cancel()
    {
        Nav.NavigateTo("/my-events", forceLoad: true);
    }
}