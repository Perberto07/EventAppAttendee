@page "/forgot-password"
@inject HttpClient Http
@inject NavigationManager Nav
@using System.Net.Http.Json


<MudContainer MaxWidth="MaxWidth.Small">
    <MudCard Class="p-4 max-w-1xl mx-auto m-4"
             Style="margin: 5px; background-color: #0014; color: white">
        <MudCardContent style="color: azure">
            <MudText Typo="Typo.h5" Class="mb-2">Forgot your password?</MudText>
            <MudText Typo="Typo.body2" Class="mb-4">
                Enter your <b>registered email</b> to receive a password reset link.
            </MudText>

            <MudTextField @bind-Value="email"
                          Label="Email"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => email)"
                          Immediate="true"
                          Class="mb-3"
                          Style="color: azure"/>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Success"
                       OnClick="SubmitEmail"
                       Disabled="@(string.IsNullOrWhiteSpace(email) || isLoading)">
                @if (isLoading)
                {
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1">
                        <MudProgressCircular Size="Size.Medium" Color="Color.Inherit" />
                        <span>Sending...</span>
                    </MudStack>
                }
                else
                {
                    <span>
                        <MudIcon Icon="@Icons.Material.Outlined.Send"/>
                            Reset Link
                    </span>
                }
            </MudButton>


            @if (!string.IsNullOrEmpty(message))
            {
                <MudText Typo="Typo.body2" Color="@messageColor" Class="mt-2">@message</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string? email;
    private string message = "";
    private Color messageColor = Color.Default;
    private bool isLoading = false;

    private async Task SubmitEmail()
    {
        if (string.IsNullOrWhiteSpace(email)) return;

        isLoading = true;
        message = "";

        try
        {
            var dto = new ForgotPasswordDto { Email = email! };
            var response = await Http.PostAsJsonAsync("api/auth/forgot-password", dto);

            if (response.IsSuccessStatusCode)
            {
                message = "Check your email for the reset link!";
                messageColor = Color.Success;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
                messageColor = Color.Error;
            }
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
            messageColor = Color.Error;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class ForgotPasswordDto
    {
        public string Email { get; set; } = string.Empty;
    }
}
