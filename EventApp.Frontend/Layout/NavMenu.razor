@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider JwtAuth
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudStack Spacing="1" Class="pa-3"
          Style="background-color: #37474F; color: white; height: 100vh;">

    <!-- Navigation Buttons -->
    <MudButton Variant="Variant.Text"
               StartIcon="@Icons.Material.Filled.Home"
               FullWidth="true"
               Color="Color.Inherit"
               OnClick="@(() => Navigation.NavigateTo("/"))"
               Class="justify-start text-left"
               Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
               @onmouseover="@((e) => SetButtonStyle(e, true))"
               @onmouseout="@((e) => SetButtonStyle(e, false))">
        <MudText Typo="Typo.body1" Style="font-weight: 500;">Home</MudText>
    </MudButton>

    <MudButton Variant="Variant.Text"
               StartIcon="@Icons.Material.Filled.Event"
               FullWidth="true"
               Color="Color.Inherit"
               OnClick="@(() => Navigation.NavigateTo("/upcomming-events"))"
               Class="justify-start text-left"
               Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
               @onmouseover="@((e) => SetButtonStyle(e, true))"
               @onmouseout="@((e) => SetButtonStyle(e, false))">
        <MudText Typo="Typo.body1" Style="font-weight: 500;">Events</MudText>
    </MudButton>

    <MudButton Variant="Variant.Text"
               StartIcon="@Icons.Material.Filled.AccountCircle"
               FullWidth="true"
               Color="Color.Inherit"
               OnClick="@(() => Navigation.NavigateTo("/my-events"))"
               Class="justify-start text-left"
               Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;">
        <MudText Typo="Typo.body1" Style="font-weight: 500;">My Events</MudText>
    </MudButton>

    @if (isOrganizer)
    {
        <MudButton Variant="Variant.Text"
                   OnClick="@(() => Navigation.NavigateTo("/create-event"))"
                   StartIcon="@Icons.Material.Filled.Create"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Book Event</MudText>
        </MudButton>
    }

    @if (isAdmin)
    {
        <MudText Typo="Typo.caption" Style="color: #B0BEC5; padding-left: 16px; margin-bottom: 8px; font-weight: 600; text-transform: uppercase; letter-spacing: 1px;">
            Admin
        </MudText>
        
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Edit"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
                   OnClick="@(() => Navigation.NavigateTo("admin/manage-events"))">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Pending Events</MudText>
        </MudButton>

        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.EventSeat"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
                   OnClick="@(() => Navigation.NavigateTo("/seat-layouts"))">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Seat Layouts</MudText>
        </MudButton>
    }

    <!-- Spacer to push account section to bottom -->
    <MudSpacer />

    
    @if (!isLoggedIn)
    {
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Login"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
                   OnClick="@ShowLoginDialog">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Login</MudText>
        </MudButton>

        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.AppRegistration"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; margin-bottom: 4px; border-radius: 8px; text-transform: none;"
                   OnClick="@ShowRegistrationDialog">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Register</MudText>
        </MudButton>
    }
    else
    {
        <!-- User Info Card -->
        <MudCard Style="background-color: #455A64; border: 1px solid #546E7A;height: min-content; padding: 2px">
            <MudCardContent Style="padding:0px">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Style="color: black;" Size="Size.Medium" />
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.caption" Style="color: #B0BEC5; margin-bottom: -4px;">Signed in as</MudText>
                        <MudText Typo="Typo.body2" Style="color: #FFCDD2; font-weight: 600;">@username</MudText>
                    </MudStack>
                </MudStack>
            </MudCardContent>
        </MudCard>

        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Logout"
                   FullWidth="true"
                   Color="Color.Inherit"
                   Class="justify-start text-left"
                   Style="color: #FFCDD2; padding: 12px 16px; border-radius: 8px; text-transform: none;"
                   OnClick="@Logout">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Logout</MudText>
        </MudButton>
    }
</MudStack>

<style>
    .mud-button:hover {
        background-color: #455A64 !important;
        transition: background-color 0.2s ease;
    }
    
    .mud-button:focus {
        background-color: #B71C1C !important;
        color: white !important;
    }
</style>

@code {
    bool isOrganizer = false;
    bool isAdmin = false;
    bool isLoggedIn;
    string username = "Guest";

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var authState = await JwtAuth.GetAuthenticationStateAsync();
            var user = authState.User;
            isLoggedIn = true;

            if (user.Identity?.IsAuthenticated == true)
            {
                var roles = user.FindAll(ClaimTypes.Role).Select(r => r.Value).ToList();

                isOrganizer = roles.Contains("Organizer");
                isAdmin = roles.Contains("Admin");

                username = user.FindFirst(ClaimTypes.Name)?.Value
                  ?? user.FindFirst("name")?.Value
                  ?? "User";
            }
        }
    }

    private void ShowLoginDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<LoginDialog>("Login", options);
    }

    private void ShowRegistrationDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<RegistrationDialog>("Register", options);
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        isLoggedIn = false;
        username = "Guest";
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private void SetButtonStyle(Microsoft.AspNetCore.Components.Web.MouseEventArgs e, bool isHover)
    {
        // This method can be expanded for additional hover effects if needed
    }
}